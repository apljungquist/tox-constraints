"""Simple tox plugin to facilitate working with abstract and concrete dependencies"""
from pathlib import Path
from typing import List

import tox  # type: ignore

REQ_PATH = Path("requirements")

HEADER = """\
#
# This file is autogenerated by tox-constraints
# It is updated every time tox runs
#
"""


def _patch_envconfigs(envconfigs):
    for envconfig in envconfigs.values():
        envconfig.install_command.append("-cconstraints.txt")
        if envconfig.skip_install is True:
            pass
        elif envconfig.skip_install is False:
            envconfig.install_command.append(
                "-r" + str(REQ_PATH / "install_requires.txt")
            )
        else:
            raise ValueError


def _save_if_different(path: Path, new_content: str):
    """Save `new_content` to file if it is different to the existing content.

    Useful e.g. for only touching files when they change to avoid triggering make.
    """
    try:
        with path.open("r") as fp:
            old_content = fp.read()
    except FileNotFoundError:
        old_content = None

    if old_content != new_content:
        with path.open("w") as fp:
            fp.write(new_content)


def _export_deps(envconfigs):
    if not REQ_PATH.exists():
        REQ_PATH.mkdir()

    tox_path = REQ_PATH / "tox"
    if not tox_path.exists():
        tox_path.mkdir()

    filepaths: List[Path] = []
    for name, envconfig in envconfigs.items():
        filepath = tox_path / f"{name}.txt"
        _save_if_different(
            filepath, HEADER + "\n".join(str(dep) for dep in envconfig.deps)
        )
        filepaths.append(filepath)

    _save_if_different(
        REQ_PATH / "tox.txt",
        HEADER
        + "\n".join(f"-r{filepath.relative_to(REQ_PATH)}" for filepath in filepaths),
    )


@tox.hookimpl
def tox_configure(config):
    """Apply concrete constraints and export abstract dependencies"""
    _patch_envconfigs(config.envconfigs)
    _export_deps(config.envconfigs)
